package main

import (
	"bytes"
	"encoding/json"
	"flag"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"text/template"
)

// TODO: In the future this should be moved into some sort of configuration that can be used to manage mappings, alias
//   and other general information useful for ode generation.
var keyMap = map[string]string{
	"MCD_DAI":        "Dai",
	"MCD_VAT":        "Vat",
	"MCD_POT":        "Pot",
	"MCD_JUG":        "Jug",
	"MCD_VOW":        "Vow",
	"MCD_FLOP":       "Flop",
	"MCD_FLAP":       "Flap",
	"MCD_FLIP_ETH_A": "FlipEthA",
	"MCD_JOIN_ETH_A": "JoinEthA",
	"MCD_FLIP_BAT_A": "FlipBatA",
	"MCD_JOIN_BAT_A": "JoinBatA",
	"MCD_FLIP_SAI":   "FlipSai",
	"MCD_JOIN_SAI":   "JoinSai",
}

func main() {
	contractAddrMapFile := flag.String("contracts", "./contracts.json", "The MCD contract address mapping")
	// Confirm the value pass is a valid file
	stat, err := os.Stat(*contractAddrMapFile)
	if os.IsNotExist(err) {
		log.Fatalln(err)
	}
	if stat.IsDir() {
		log.Fatalln("Contract address map must be a file")
	}
	// Open a file descriptor to our contract address file
	contractAddrMapBytes, err := ioutil.ReadFile(*contractAddrMapFile)
	if err != nil {
		log.Fatalln(err)
	}
	// Load and unmarshal the contract address file
	contractAddrMap := map[string]string{}
	err = json.Unmarshal(contractAddrMapBytes, &contractAddrMap)
	if err != nil {
		log.Fatalln(err)
	}
	// Build a template
	funcMap := template.FuncMap{
		"addressLookup": func(name string) string {
			return contractAddrMap[name]
		},
	}
	addrTemplate, err := template.New("addr.go").Funcs(funcMap).Parse(tmpl)
	if err != nil {
		log.Fatalln(err)
	}
	// Execute the template into a buffer for later formatting
	var buffer bytes.Buffer
	err = addrTemplate.Execute(&buffer, keyMap)
	if err != nil {
		log.Fatalln(err)
	}
	// Format the resulting source code string
	formated, err := format.Source(buffer.Bytes())
	if err != nil {
		log.Fatalln(err)
	}
	os.Stdout.Write(formated)
}

const tmpl = `
// THIS FILE IS AUTOGENERATED. DO NOT EDIT!

package maker

import "github.com/ethereum/go-ethereum/common"

// https://changelog.makerdao.com/releases/mainnet/1.0.3/contracts.json
var (
	{{range $k, $v := .}}
	{{ $v }}Address = common.HexToAddress("{{ addressLookup $k }}"){{end}}
)
`
